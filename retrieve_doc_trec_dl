import os
from pathlib import Path
os.environ['PYSERINI_CACHE'] = r'D:\PyseriniCache'
os.environ['IR_DATASETS_HOME'] = r'D:\ir_datasets'

from pyserini.search.lucene import LuceneSearcher
import ir_datasets

# -----------------------------
# 1) Searcher setup (MS MARCO v1 Passage index)
# -----------------------------
searcher = LuceneSearcher.from_prebuilt_index('msmarco-v1-passage')
searcher.set_bm25(k1=0.82, b=0.68)

# -----------------------------
# 2) Load TREC-DL 2019 (passage) queries + qrels
#    This dataset uses MS MARCO *passage* IDs, so it matches the index above.
# -----------------------------
dataset_id = 'msmarco-passage/trec-dl-2019/judged'
ds = ir_datasets.load(dataset_id)

# Build qrels dict {qid: {docid: relevance}}
qrels = {}
for q in ds.qrels_iter():
    qrels.setdefault(str(q.query_id), {})[q.doc_id] = int(q.relevance)

# -----------------------------
# 3) Pick one benchmark query (e.g., the 3rd query in the set)
# -----------------------------
queries = list(ds.queries_iter())
query = queries[2]                     # choose any index you like
qid = str(query.query_id)
topic = query.text

print(f"Query {qid}: {topic}\n")

# -----------------------------
# 4) Retrieve top-k docs for this query
# -----------------------------
k = 20
hits = searcher.search(topic, k=k)

# -----------------------------
# 5) Assemble results (topic, docid, score, relevance, raw text)
# -----------------------------
print(f"Top {k} results for query {qid} ({topic}):\n")
results = []
for i, h in enumerate(hits, 1):
    raw = searcher.doc(h.docid).raw()
    results.append({
        "query": topic,
        "passage": raw if raw is not None else "",
        "docid": h.docid,
        "score": h.score,
        "relevance": qrels.get(qid, {}).get(h.docid, None),
    })

# -----------------------------
# 6) Write outputs
# -----------------------------
out_dir = Path("outputs")
out_dir.mkdir(exist_ok=True)

# (a) Labels/metadata file
labels_path = out_dir / f"labels_q{qid}.tsv"
with labels_path.open("w", encoding="utf-8", newline="") as f:
    f.write(f"# Query ID: {qid}\n")
    f.write(f"# Topic: {topic}\n")
    f.write("# Dataset: TREC-DL 2019 (passage) via ir_datasets\n")
    f.write("docid\trelevance\tscore\n")
    for r in results:
        rel = "" if r["relevance"] is None else r["relevance"]
        f.write(f"{r['docid']}\t{rel}\t{r['score']:.4f}\n")

# (b) Topic + retrieved documentsâ€™ text
docs_path = out_dir / f"topic_and_docs_q{qid}.txt"
with docs_path.open("w", encoding="utf-8") as f:
    f.write(f"Query ID: {qid}\nTopic: {topic}\n\n")
    for i, r in enumerate(results, 1):
        rel = "None" if r["relevance"] is None else str(r["relevance"])
        f.write(f"Doc {i}: {r['docid']} (rel={rel}, score={r['score']:.3f})\n")
        f.write("Passage:\n")
        f.write(r["passage"])
        f.write("\n" + "-"*80 + "\n\n")

print(f"Wrote: {labels_path}")
print(f"Wrote: {docs_path}")
